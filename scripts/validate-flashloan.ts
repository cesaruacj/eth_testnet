import { ethers } from "ethers";
import * as dotenv from "dotenv";
import * as fs from "fs";
import * as path from "path";
import { TOKENS, AAVE_TOKENS, AAVE_V3, DEPLOYED_CONTRACTS } from "./sepoliaAddresses";
dotenv.config();

// Configuraci√≥n
const FLASH_LOAN_CONTRACT_ADDRESS = DEPLOYED_CONTRACTS.FLASH_LOAN;
const ARBITRAGE_LOGIC_ADDRESS = DEPLOYED_CONTRACTS.ARBITRAGE_LOGIC;
const AAVE_POOL_ADDRESS_PROVIDER = AAVE_V3.POOL_ADDRESSES_PROVIDER;

// Token a probar (usa tokens soportados por Aave en Sepolia)
const TEST_TOKEN = AAVE_TOKENS.LINK; // Tambi√©n puedes probar con DAI, USDC, WETH
const TEST_TOKEN_SYMBOL = "LINK";
const TEST_AMOUNT = "1"; // Cantidad peque√±a para pruebas iniciales

// ABI m√≠nimos
const flashLoanABI = [
  "function executeFlashLoan(address asset, uint256 amount) external",
  "function executeOperation(address[] calldata assets, uint256[] calldata amounts, uint256[] calldata premiums, address initiator, bytes calldata params) external returns (bool)"
];

const erc20ABI = [
  "function approve(address spender, uint256 amount) external returns (bool)",
  "function allowance(address owner, address spender) external view returns (uint256)",
  "function balanceOf(address account) external view returns (uint256)",
  "function decimals() external view returns (uint8)",
  "function symbol() external view returns (string)"
];

const poolAddressProviderABI = [
  "function getPool() external view returns (address)"
];

const poolABI = [
  "function getReserveData(address asset) external view returns (tuple(uint256 configuration, uint128 liquidityIndex, uint128 currentLiquidityRate, uint128 variableBorrowIndex, uint128 currentVariableBorrowRate, uint128 currentStableBorrowRate, uint40 lastUpdateTimestamp, uint16 id, address aTokenAddress, address stableDebtTokenAddress, address variableDebtTokenAddress, address interestRateStrategyAddress, uint128 accruedToTreasury, uint128 unbacked, uint128 isolationModeTotalDebt))"
];

// Inicializaci√≥n de proveedor y wallet
if (!process.env.SEPOLIA_RPC_URL || !process.env.PRIVATE_KEY) {
  throw new Error("SEPOLIA_RPC_URL y PRIVATE_KEY deben estar definidos en el archivo .env");
}

const provider = new ethers.providers.JsonRpcProvider(process.env.SEPOLIA_RPC_URL);
const wallet = new ethers.Wallet(process.env.PRIVATE_KEY, provider);

// Funci√≥n principal de validaci√≥n
async function validateFlashLoan() {
  console.log("\nüîç INICIANDO VALIDACI√ìN DEL CONTRATO FLASH LOAN\n");
  
  // Paso 1: Verificar que los contratos existen
  await validateContractExistence();
  
  // Paso 2: Verificar que el token est√° soportado por Aave
  await validateTokenSupport();
  
  // Paso 3: Verificar saldos y aprobaciones
  await validateBalancesAndAllowances();
  
  // Paso 4: Simular la funci√≥n de flash loan (sin enviarlo a la blockchain)
  await simulateFlashLoan();
  
  // Paso 5: Ejecutar un flash loan peque√±o
  if (await confirmExecution()) {
    await executeTestFlashLoan();
  }
}

// Valida que los contratos existan en la blockchain
async function validateContractExistence() {
  console.log("PASO 1: Verificando existencia de contratos en la blockchain...");
  
  try {
    const flashLoanCode = await provider.getCode(FLASH_LOAN_CONTRACT_ADDRESS);
    if (flashLoanCode === '0x') {
      console.error(`‚ùå El contrato FlashLoanSepolia no existe en ${FLASH_LOAN_CONTRACT_ADDRESS}`);
      process.exit(1);
    }
    console.log(`‚úì Contrato FlashLoanSepolia encontrado en ${FLASH_LOAN_CONTRACT_ADDRESS}`);
    
    const arbitrageCode = await provider.getCode(ARBITRAGE_LOGIC_ADDRESS);
    if (arbitrageCode === '0x') {
      console.error(`‚ùå El contrato ArbitrageLogic no existe en ${ARBITRAGE_LOGIC_ADDRESS}`);
      process.exit(1);
    }
    console.log(`‚úì Contrato ArbitrageLogic encontrado en ${ARBITRAGE_LOGIC_ADDRESS}`);
    
    const providerCode = await provider.getCode(AAVE_POOL_ADDRESS_PROVIDER);
    if (providerCode === '0x') {
      console.error(`‚ùå El contrato PoolAddressesProvider no existe en ${AAVE_POOL_ADDRESS_PROVIDER}`);
      process.exit(1);
    }
    console.log(`‚úì Contrato PoolAddressesProvider encontrado en ${AAVE_POOL_ADDRESS_PROVIDER}`);
    
    console.log("‚úÖ Todos los contratos existen en la blockchain\n");
  } catch (error) {
    console.error("Error verificando contratos:", error);
    process.exit(1);
  }
}

// Valida que el token est√© soportado por Aave
async function validateTokenSupport() {
  console.log(`PASO 2: Verificando soporte del token ${TEST_TOKEN_SYMBOL} en Aave...`);
  
  try {
    // Obtener la Pool de Aave desde el Provider
    const providerContract = new ethers.Contract(AAVE_POOL_ADDRESS_PROVIDER, poolAddressProviderABI, provider);
    const poolAddress = await providerContract.getPool();
    console.log(`‚úì Pool de Aave encontrado en: ${poolAddress}`);
    
    // Verificar que el token est√° soportado en la Pool
    const poolContract = new ethers.Contract(poolAddress, poolABI, provider);
    const reserveData = await poolContract.getReserveData(TEST_TOKEN);
    
    // Si no revierte, el token est√° soportado
    const tokenContract = new ethers.Contract(TEST_TOKEN, erc20ABI, provider);
    const symbol = await tokenContract.symbol();
    const decimals = await tokenContract.decimals();
    
    console.log(`‚úì Token ${symbol} (${TEST_TOKEN}) soportado por Aave`);
    console.log(`‚úì aToken address: ${reserveData.aTokenAddress}`);
    console.log(`‚úì Decimals: ${decimals}`);
    console.log(`‚úì Liquidez disponible: ${ethers.utils.formatUnits(reserveData.currentLiquidityRate, 27)}%`);
    
    console.log("‚úÖ Token verificado y soportado por Aave\n");
    
    return { poolAddress, decimals };
  } catch (error) {
    console.error(`‚ùå Error verificando soporte del token: ${error instanceof Error ? (error instanceof Error ? error.message : String(error)) : String(error)}`);
    console.error("Es posible que Aave en Sepolia no soporte este token o que la reserva est√© pausada");
    process.exit(1);
  }
}

// Valida saldos y aprobaciones
async function validateBalancesAndAllowances() {
  console.log("PASO 3: Verificando saldos y aprobaciones...");
  
  try {
    const tokenContract = new ethers.Contract(TEST_TOKEN, erc20ABI, provider);
    const decimals = await tokenContract.decimals();
    
    // Verificar saldo de la wallet
    const walletBalance = await tokenContract.balanceOf(wallet.address);
    console.log(`‚úì Saldo de ${TEST_TOKEN_SYMBOL} en tu wallet: ${ethers.utils.formatUnits(walletBalance, decimals)}`);
    
    // Verificar saldo del contrato FlashLoan
    const contractBalance = await tokenContract.balanceOf(FLASH_LOAN_CONTRACT_ADDRESS);
    console.log(`‚úì Saldo de ${TEST_TOKEN_SYMBOL} en FlashLoanSepolia: ${ethers.utils.formatUnits(contractBalance, decimals)}`);
    
    // Verificar aprobaci√≥n de la wallet al contrato FlashLoan
    const allowanceToFlashLoan = await tokenContract.allowance(wallet.address, FLASH_LOAN_CONTRACT_ADDRESS);
    console.log(`‚úì Aprobaci√≥n actual de wallet a FlashLoanSepolia: ${ethers.utils.formatUnits(allowanceToFlashLoan, decimals)}`);
    
    // Verificar aprobaci√≥n del contrato FlashLoan a ArbitrageLogic
    const flashLoanWithProvider = new ethers.Contract(FLASH_LOAN_CONTRACT_ADDRESS, flashLoanABI, provider);
    const allowanceToArbitrage = await tokenContract.allowance(FLASH_LOAN_CONTRACT_ADDRESS, ARBITRAGE_LOGIC_ADDRESS);
    console.log(`‚úì Aprobaci√≥n actual de FlashLoanSepolia a ArbitrageLogic: ${ethers.utils.formatUnits(allowanceToArbitrage, decimals)}`);
    
    console.log("‚úÖ Verificaci√≥n de saldos y aprobaciones completada\n");
  } catch (error) {
    console.error("Error verificando saldos y aprobaciones:", error);
  }
}

// Simula la ejecuci√≥n del flash loan (sin enviar transacci√≥n)
async function simulateFlashLoan() {
  console.log("PASO 4: Simulando ejecuci√≥n de flash loan...");
  
  try {
    const tokenContract = new ethers.Contract(TEST_TOKEN, erc20ABI, provider);
    const decimals = await tokenContract.decimals();
    const amount = ethers.utils.parseUnits(TEST_AMOUNT, decimals);
    
    // Conectar al contrato FlashLoan con la wallet
    const flashLoanWithSigner = new ethers.Contract(FLASH_LOAN_CONTRACT_ADDRESS, flashLoanABI, wallet);
    
    // Estimar gas (esto simular√° la llamada completa sin ejecutarla)
    const gasEstimate = await flashLoanWithSigner.estimateGas.executeFlashLoan(TEST_TOKEN, amount);
    
    console.log(`‚úì Simulaci√≥n exitosa! Estimaci√≥n de gas: ${gasEstimate.toString()}`);
    console.log("‚úÖ La transacci√≥n de flash loan deber√≠a ejecutarse correctamente\n");
    
    return true;
  } catch (error) {
    console.error("‚ùå Error en la simulaci√≥n del flash loan:");
    console.error((error instanceof Error ? error.message : String(error)));
    
    // Analizar el error para dar recomendaciones m√°s espec√≠ficas
    if ((error instanceof Error ? error.message : String(error)).includes("TRANSFER_AMOUNT_EXCEEDS_BALANCE")) {
      console.log("\n‚ö†Ô∏è El error parece indicar un problema de balance insuficiente.");
      console.log("Posibles causas:");
      console.log("1. La Pool de Aave no tiene suficiente liquidez del token.");
      console.log("2. El contrato ArbitrageLogic no est√° retornando los tokens al FlashLoanSepolia.");
    } 
    else if ((error instanceof Error ? error.message : String(error)).includes("insufficient")) {
      console.log("\n‚ö†Ô∏è El error parece indicar un problema de fondos insuficientes para gas.");
      console.log("Aseg√∫rate de tener suficiente ETH en tu wallet para cubrir el gas.");
    }
    else if ((error instanceof Error ? error.message : String(error)).includes("approve")) {
      console.log("\n‚ö†Ô∏è El error parece estar relacionado con aprobaciones (approve).");
      console.log("Verifica la implementaci√≥n de los m√©todos de aprobaci√≥n en el contrato.");
    }
    
    console.log("\n‚ö†Ô∏è Recomendaciones:");
    console.log("1. Revisa que la funci√≥n executeOperation en FlashLoanSepolia.sol maneje correctamente los premiums.");
    console.log("2. Aseg√∫rate que ArbitrageLogic.executeArbitrage devuelva los tokens al contrato FlashLoanSepolia.");
    console.log("3. Prueba con un monto m√°s peque√±o, por ejemplo 0.1 tokens en vez de 1.");
    console.log("4. Verifica que el executeOperation use el m√©todo de aprovaci√≥n correcto.\n");
    
    return false;
  }
}

// Confirma si el usuario quiere ejecutar un flash loan de prueba
async function confirmExecution() {
  // En un entorno de script, simplemente retornamos true
  // En un entorno interactivo, podr√≠as implementar una confirmaci√≥n real
  console.log("PASO 5: ¬øEjecutar un flash loan de prueba?");
  console.log(`Se ejecutar√° un flash loan de ${TEST_AMOUNT} ${TEST_TOKEN_SYMBOL}`);
  console.log("NOTA: Esto enviar√° una transacci√≥n real a la blockchain\n");
  
  return true; // Cambiar a false si no quieres ejecutar autom√°ticamente
}

// Ejecuta un flash loan peque√±o como prueba
async function executeTestFlashLoan() {
  console.log("Ejecutando flash loan de prueba...");
  
  try {
    const tokenContract = new ethers.Contract(TEST_TOKEN, erc20ABI, provider);
    const decimals = await tokenContract.decimals();
    const amount = ethers.utils.parseUnits(TEST_AMOUNT, decimals);
    
    // Conectar al contrato FlashLoan con la wallet
    const flashLoanWithSigner = new ethers.Contract(FLASH_LOAN_CONTRACT_ADDRESS, flashLoanABI, wallet);
    
    // Configurar gas optimizado
    const feeData = await provider.getFeeData();
    const gasSettings: any = {
      gasLimit: 5000000
    };

    if (feeData.maxFeePerGas && feeData.maxPriorityFeePerGas) {
      gasSettings.maxFeePerGas = feeData.maxFeePerGas.mul(15).div(10);
      gasSettings.maxPriorityFeePerGas = feeData.maxPriorityFeePerGas.mul(15).div(10);
    } else {
      // Fallback a gasPrice tradicional si EIP-1559 no est√° disponible
      gasSettings.gasPrice = (await provider.getGasPrice()).mul(15).div(10);
    }
    
    // Ejecutar la transacci√≥n
    console.log("Enviando transacci√≥n...");
    const tx = await flashLoanWithSigner.executeFlashLoan(TEST_TOKEN, amount, gasSettings);
    console.log(`‚úì Transacci√≥n enviada: ${tx.hash}`);
    console.log(`Ver en Etherscan: https://sepolia.etherscan.io/tx/${tx.hash}`);
    
    console.log("Esperando confirmaci√≥n...");
    const receipt = await tx.wait();
    
    if (receipt.status === 1) {
      console.log("‚úÖ Flash loan ejecutado exitosamente!");
      console.log(`Gas usado: ${receipt.gasUsed.toString()}`);
    } else {
      console.error("‚ùå La transacci√≥n fall√≥ en la blockchain");
    }
    
    // Verificar balances despu√©s de la transacci√≥n
    const finalBalance = await tokenContract.balanceOf(FLASH_LOAN_CONTRACT_ADDRESS);
    console.log(`Saldo final de ${TEST_TOKEN_SYMBOL} en el contrato: ${ethers.utils.formatUnits(finalBalance, decimals)}`);
    
    return receipt.status === 1;
  } catch (error) {
    console.error("‚ùå Error ejecutando flash loan:");
    console.error((error instanceof Error ? error.message : String(error)));
    return false;
  }
}

// Ejecutar la validaci√≥n
validateFlashLoan().then(() => {
  console.log("\nüèÅ Validaci√≥n completada");
}).catch(error => {
  console.error("Error en la validaci√≥n:", error);
});
